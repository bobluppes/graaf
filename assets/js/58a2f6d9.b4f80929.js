"use strict";(self.webpackChunkgraaf=self.webpackChunkgraaf||[]).push([[516],{3186:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>o,frontMatter:()=>i,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"quickstart/basics/architecture","title":"Graaf Architecture","description":"From a very high level, the project is structured in two parts:","source":"@site/docs/quickstart/basics/architecture.md","sourceDirName":"quickstart/basics","slug":"/quickstart/basics/architecture","permalink":"/graaf/docs/quickstart/basics/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/bobluppes/graaf/tree/main/docs/quickstart/basics/architecture.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"quickstartSidebar","previous":{"title":"Quickstart - Basics","permalink":"/graaf/docs/category/quickstart---basics"},"next":{"title":"Creating Your First Graph","permalink":"/graaf/docs/quickstart/basics/creating-your-first-graph"}}');var s=a(4848),n=a(8453);const i={sidebar_position:1},d="Graaf Architecture",c={},h=[{value:"Graph classes and core data structures",id:"graph-classes-and-core-data-structures",level:2},{value:"Directed and undirected graphs",id:"directed-and-undirected-graphs",level:3},{value:"Weighted graphs",id:"weighted-graphs",level:3},{value:"Algorithms and additional functionality",id:"algorithms-and-additional-functionality",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"graaf-architecture",children:"Graaf Architecture"})}),"\n",(0,s.jsx)(t.p,{children:"From a very high level, the project is structured in two parts:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The graph classes and core data structures"}),"\n",(0,s.jsx)(t.li,{children:"Algorithms and additional functionality"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"graph-classes-and-core-data-structures",children:"Graph classes and core data structures"}),"\n",(0,s.jsx)(t.p,{children:"The main class of the library is the abstract graph class:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-c++",children:"enum class edge_type { WEIGHTED, UNWEIGHTED };\nenum class graph_spec { DIRECTED, UNDIRECTED };\n\ntemplate <typename VERTEX_T, typename EDGE_T, edge_type EDGE_TYPE_V, graph_spec GRAPH_SPEC_V>\nclass graph {...};\n"})}),"\n",(0,s.jsxs)(t.p,{children:["An instance of a ",(0,s.jsx)(t.code,{children:"graph"})," can have user provided types for the vertices and edges. Internally, it stores the graph in an\nadjacency list, and has separate containers for the vertex and edge instances:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-c++",children:"// N.B. These types are a bit more abstracted in the codebase behind using\n// declarations, but for clarity I have left this out.\n\n// Adjacency information is stored in a set for fast existence checks and fast removal\nstd::unordered_map<vertex_id_t, std::unordered_set<vertex_id_t>> adjacency_list_{};\n\n// Storing these in a separate container has the advantage that\n// vertices and edges are only in memory once\nstd::unordered_map<vertex_id_t, VERTEX_T> vertices_{};\nstd::unordered_map<std::pair<vertex_id_t, vertex_id_t>, edge_t, edge_id_hash> edges_{};\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"graph"})," class is abstract as it contains pure virtual private methods related to the handling of\nedges (",(0,s.jsx)(t.code,{children:"do_has_edge"}),", ",(0,s.jsx)(t.code,{children:"do_get_edge"}),", ",(0,s.jsx)(t.code,{children:"do_add_edge"}),", and ",(0,s.jsx)(t.code,{children:"do_remove_edge"}),")."]}),"\n",(0,s.jsx)(t.h3,{id:"directed-and-undirected-graphs",children:"Directed and undirected graphs"}),"\n",(0,s.jsxs)(t.p,{children:["There are two classes which publicly derive from ",(0,s.jsx)(t.code,{children:"graph"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"directed_graph"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"undirected_graph"})}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-c++",children:"template <typename VERTEX_T, typename EDGE_T, edge_type EDGE_TYPE_V = edge_type::UNWEIGHTED>\nclass directed_graph final\n    : public graph<VERTEX_T, EDGE_T, EDGE_TYPE_V, graph_spec::DIRECTED> \n    {...};\n\ntemplate <typename VERTEX_T, typename EDGE_T, edge_type EDGE_TYPE_V = edge_type::UNWEIGHTED>\nclass undirected_graph final\n    : public graph<VERTEX_T, EDGE_T, EDGE_TYPE_V, graph_spec::UNDIRECTED> \n    {...};\n"})}),"\n",(0,s.jsx)(t.p,{children:"These are the classes which the user instantiates."}),"\n",(0,s.jsxs)(t.p,{children:["They provide implementations for the pure virtual methods related to handling edges. The ",(0,s.jsx)(t.code,{children:"unweighted_graph"})," first sorts\nthe pair of vertex ids related to an edge before interacting with the internal ",(0,s.jsx)(t.code,{children:"edges_"})," data structure. This ensures\nthat an edge ",(0,s.jsx)(t.strong,{children:"a"}),"->",(0,s.jsx)(t.strong,{children:"b"})," is the same as an edge from ",(0,s.jsx)(t.strong,{children:"b"}),"->",(0,s.jsx)(t.strong,{children:"a"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"weighted-graphs",children:"Weighted graphs"}),"\n",(0,s.jsxs)(t.p,{children:["Certain algorithms (such as A*) operate on weighted graphs. A graph is automatically weighted if a primitive numeric\ntype is passed as a template parameter to ",(0,s.jsx)(t.code,{children:"EDGE_T"}),". Alternatively, user provided edge classes can publicly derive\nfrom ",(0,s.jsx)(t.code,{children:"weighted_edge"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"weighted_edge"})," class provides a default implementation for the ",(0,s.jsx)(t.code,{children:"get_weight"})," method, but this can be overridden in\nthe derived class:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-c++",children:"template <typename WEIGHT_T = int>\nclass weighted_edge {\n public:\n  using weight_t = WEIGHT_T;\n  /**\n   * By default an edge has a unit weight.\n   */\n  [[nodiscard]] virtual WEIGHT_T get_weight() const noexcept { return 1; };\n};\n\n"})}),"\n",(0,s.jsxs)(t.p,{children:["To create an unweighted graph, simply do not derive from ",(0,s.jsx)(t.code,{children:"weighted_edge"})," in your edge class."]}),"\n",(0,s.jsx)(t.h2,{id:"algorithms-and-additional-functionality",children:"Algorithms and additional functionality"}),"\n",(0,s.jsx)(t.p,{children:"The idea here is to keep the graph classes as general-purpose as possible, and to not include use case specific logic (\nsuch as dot serialization) as member functions. Therefore, each algorithm/utility function is implemented as a free\nfunction."})]})}function o(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>d});var r=a(6540);const s={},n=r.createContext(s);function i(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);