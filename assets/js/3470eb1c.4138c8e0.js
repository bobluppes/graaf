"use strict";(self.webpackChunkgraaf=self.webpackChunkgraaf||[]).push([[590],{2460:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"examples/example-basics/dot-serialization","title":"Dot Serialization Example","description":"The to_dot function as defined under graaf::io can be used to searialize graphs to","source":"@site/docs/examples/example-basics/dot-serialization.md","sourceDirName":"examples/example-basics","slug":"/examples/example-basics/dot-serialization","permalink":"/graaf/docs/examples/example-basics/dot-serialization","draft":false,"unlisted":false,"editUrl":"https://github.com/bobluppes/graaf/tree/main/docs/examples/example-basics/dot-serialization.md","tags":[],"version":"current","frontMatter":{},"sidebar":"exampleSidebar","previous":{"title":"Basic Examples","permalink":"/graaf/docs/category/basic-examples"},"next":{"title":"Shortest Path Example","permalink":"/graaf/docs/examples/example-basics/shortest-path"}}');var n=r(4848),s=r(8453);const i={},o="Dot Serialization Example",d={},l=[{value:"Numeric primitive types",id:"numeric-primitive-types",level:2},{value:"User defined types",id:"user-defined-types",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"dot-serialization-example",children:"Dot Serialization Example"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"to_dot"})," function as defined under ",(0,n.jsx)(t.code,{children:"graaf::io"})," can be used to searialize graphs to\nthe ",(0,n.jsx)(t.a,{href:"https://graphviz.org/doc/info/lang.html",children:"dot format"}),". This can be handy for debugging purposes, as well as for\npost-processing of your graphs in another tool which supports the format."]}),"\n",(0,n.jsx)(t.h2,{id:"numeric-primitive-types",children:"Numeric primitive types"}),"\n",(0,n.jsx)(t.p,{children:"Default vertex and edge writers are provided such that you can serialize graphs with numeric primitive vertices and\nedges. For instance:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-c++",children:"graaf::undirected_graph<int, float> my_graph{};\n\n// ...\n\ngraaf::io::to_dot(my_graph, path):\n"})}),"\n",(0,n.jsx)(t.h2,{id:"user-defined-types",children:"User defined types"}),"\n",(0,n.jsxs)(t.p,{children:["For user defined vertex and edge types, it is necessary to provide your own vertex and edge writers. These writers\nshould take a vertex or edge as a parameter and serialize it to a string. This resulting string is used in the\ndot ",(0,n.jsx)(t.a,{href:"https://graphviz.org/doc/info/attrs.html",children:"attribute list"})," of the respective vertex or edge."]}),"\n",(0,n.jsx)(t.p,{children:"For example, consider the following user defined vertex and edge types:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-c++",children:"struct my_vertex {\n  int number{};\n  std::string name{};\n};\n\nenum class edge_priority { LOW, HIGH };\n\nstruct my_edge {\n  edge_priority priority{edge_priority::LOW};\n  float weight{};\n};\n"})}),"\n",(0,n.jsxs)(t.p,{children:["We define two lambdas to serialize these vertices and edges. Here we can use any of\nthe ",(0,n.jsx)(t.a,{href:"https://graphviz.org/doc/info/attrs.html",children:"graphviz attributes"}),". In this example, we\nuse ",(0,n.jsx)(t.a,{href:"https://github.com/fmtlib/fmt",children:"fmtlib"})," to format our strings."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Vertex writer"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-c++",children:'const auto vertex_writer{[](graaf::vertex_id_t vertex_id,\n                              const my_vertex& vertex) -> std::string {\n  const auto color{vertex.number <= 25 ? "lightcyan" : "mediumspringgreen"};\n  return fmt::format("label=\\"{}: {}\\", fillcolor={}, style=filled", vertex_id, vertex.name, color);\n}};\n'})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Edge writer"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-c++",children:'const auto edge_writer{[](const graaf::vertex_ids_t& /*edge_id*/,\n                            const my_edge& edge) -> std::string {\n  const auto style{edge.priority == edge_priority::HIGH ? "solid" : "dashed"};\n  return fmt::format("label=\\"{}\\", style={}, color=gray, fontcolor=gray", edge.weight, style);\n}};\n'})}),"\n",(0,n.jsx)(t.p,{children:"Now let's create a directed graph and serialize it to dot:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-c++",children:'graaf::directed_graph<my_vertex, my_edge> graph{};\n\nconst auto vertex_1{graph.add_vertex({10, "some data"})};\nconst auto vertex_2{graph.add_vertex({20, "some more data"})};\n// ...\n\ngraph.add_edge(vertex_1, vertex_2, {edge_priority::HIGH, 3.3});\n// ...\n\nconst std::filesystem::path dof_file_path{"./my_graph.dot"};\ngraaf::io::to_dot(my_graph, dof_file_path, vertex_writer, edge_writer);\n'})}),"\n",(0,n.jsxs)(t.p,{children:["The contents of ",(0,n.jsx)(t.code,{children:"my_graph.dot"})," can be processed in any tool which supports dot format. For example, you can use\nthe ",(0,n.jsx)(t.code,{children:"dot"})," command line tool to generate png images:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"dot -Tpng ./my_graph.dot -o my_graph.png\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Alternatively, you can\nuse ",(0,n.jsx)(t.a,{href:"https://dreampuf.github.io/GraphvizOnline/#digraph%20G%20%7B%0A%0A%20%20subgraph%20cluster_0%20%7B%0A%20%20%20%20style%3Dfilled%3B%0A%20%20%20%20color%3Dlightgrey%3B%0A%20%20%20%20node%20%5Bstyle%3Dfilled%2Ccolor%3Dwhite%5D%3B%0A%20%20%20%20a0%20-%3E%20a1%20-%3E%20a2%20-%3E%20a3%3B%0A%20%20%20%20label%20%3D%20%22process%20%231%22%3B%0A%20%20%7D%0A%0A%20%20subgraph%20cluster_1%20%7B%0A%20%20%20%20node%20%5Bstyle%3Dfilled%5D%3B%0A%20%20%20%20b0%20-%3E%20b1%20-%3E%20b2%20-%3E%20b3%3B%0A%20%20%20%20label%20%3D%20%22process%20%232%22%3B%0A%20%20%20%20color%3Dblue%0A%20%20%7D%0A%20%20start%20-%3E%20a0%3B%0A%20%20start%20-%3E%20b0%3B%0A%20%20a1%20-%3E%20b3%3B%0A%20%20b2%20-%3E%20a3%3B%0A%20%20a3%20-%3E%20a0%3B%0A%20%20a3%20-%3E%20end%3B%0A%20%20b3%20-%3E%20end%3B%0A%0A%20%20start%20%5Bshape%3DMdiamond%5D%3B%0A%20%20end%20%5Bshape%3DMsquare%5D%3B%0A%7D",children:"graphviz online"}),"\nfor easy visualization:"]}),"\n",(0,n.jsx)("pre",{children:(0,n.jsx)("p",{align:"center",children:(0,n.jsx)("img",{src:r(6069).A})})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},6069:(e,t,r)=>{r.d(t,{A:()=>a});const a=r.p+"assets/images/dot-serialization-graph-a08ab35d30c6290e06ba3d7d66564475.png"},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>o});var a=r(6540);const n={},s=a.createContext(n);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);