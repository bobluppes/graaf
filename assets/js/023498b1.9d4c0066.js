"use strict";(self.webpackChunkgraaf=self.webpackChunkgraaf||[]).push([[568],{6101:t=>{t.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"quickstartSidebar":[{"type":"link","label":"Quickstart Intro","href":"/graaf/docs/quickstart/intro","docId":"quickstart/intro","unlisted":false},{"type":"category","label":"Quickstart - Installation","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installation","href":"/graaf/docs/quickstart/installation/","docId":"quickstart/installation/installation","unlisted":false},{"type":"link","label":"Alternative Installation Methods","href":"/graaf/docs/quickstart/installation/alternative-methods","docId":"quickstart/installation/alternative-methods","unlisted":false}],"href":"/graaf/docs/category/quickstart---installation"},{"type":"category","label":"Quickstart - Basics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Graaf Architecture","href":"/graaf/docs/quickstart/basics/architecture","docId":"quickstart/basics/architecture","unlisted":false},{"type":"link","label":"Creating Your First Graph","href":"/graaf/docs/quickstart/basics/creating-your-first-graph","docId":"quickstart/basics/creating-your-first-graph","unlisted":false},{"type":"link","label":"Using Algorithms","href":"/graaf/docs/quickstart/basics/using-algorithms","docId":"quickstart/basics/using-algorithms","unlisted":false}],"href":"/graaf/docs/category/quickstart---basics"}],"algorithmSidebar":[{"type":"link","label":"Algorithms Overview","href":"/graaf/docs/algorithms/intro","docId":"algorithms/intro","unlisted":false},{"type":"category","label":"Clique Detection","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Bron-Kerbosch algorithm","href":"/graaf/docs/algorithms/clique-detection/bron_kerbosch","docId":"algorithms/clique-detection/bron_kerbosch","unlisted":false}],"href":"/graaf/docs/category/clique-detection"},{"type":"category","label":"Graph Coloring Algorithms","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Greedy Graph Coloring Algorithm","href":"/graaf/docs/algorithms/coloring/greedy-graph-coloring","docId":"algorithms/coloring/greedy-graph-coloring","unlisted":false},{"type":"link","label":"Welsh Powell Algorithm","href":"/graaf/docs/algorithms/coloring/welsh-powell","docId":"algorithms/coloring/welsh-powell","unlisted":false}],"href":"/graaf/docs/category/graph-coloring-algorithms"},{"type":"category","label":"Cycle Detection Algorithms","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"DFS Based Cycle Detection","href":"/graaf/docs/algorithms/cycle-detection/dfs-based","docId":"algorithms/cycle-detection/dfs-based","unlisted":false}],"href":"/graaf/docs/category/cycle-detection-algorithms"},{"type":"category","label":"Minimum Spanning Tree","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Kruskal\'s Algorithm","href":"/graaf/docs/algorithms/minimum-spanning-tree/kruskal","docId":"algorithms/minimum-spanning-tree/kruskal","unlisted":false},{"type":"link","label":"Prim\'s Algorithm","href":"/graaf/docs/algorithms/minimum-spanning-tree/prim","docId":"algorithms/minimum-spanning-tree/prim","unlisted":false}],"href":"/graaf/docs/category/minimum-spanning-tree"},{"type":"category","label":"Shortest Path Algorithms","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"A* Search Algorithm","href":"/graaf/docs/algorithms/shortest-path/a-star","docId":"algorithms/shortest-path/a-star","unlisted":false},{"type":"link","label":"Bellman-Ford Shortest Path","href":"/graaf/docs/algorithms/shortest-path/bellman-ford","docId":"algorithms/shortest-path/bellman-ford","unlisted":false},{"type":"link","label":"BFS Based Shortest Path","href":"/graaf/docs/algorithms/shortest-path/bfs-based-shortest-path","docId":"algorithms/shortest-path/bfs-based-shortest-path","unlisted":false},{"type":"link","label":"Dijkstra Shortest Path","href":"/graaf/docs/algorithms/shortest-path/dijkstra","docId":"algorithms/shortest-path/dijkstra","unlisted":false},{"type":"link","label":"Floyd-Warshall algorithm","href":"/graaf/docs/algorithms/shortest-path/floyd-warshall","docId":"algorithms/shortest-path/floyd-warshall","unlisted":false}],"href":"/graaf/docs/category/shortest-path-algorithms"},{"type":"category","label":"Strongly Connected Component Algorithms","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Kosaraju\'s Strongly Connected Components","href":"/graaf/docs/algorithms/strongly-connected-components/kosarajus","docId":"algorithms/strongly-connected-components/kosarajus","unlisted":false},{"type":"link","label":"Tarjan\'s Strongly Connected Components","href":"/graaf/docs/algorithms/strongly-connected-components/tarjan","docId":"algorithms/strongly-connected-components/tarjan","unlisted":false}],"href":"/graaf/docs/category/strongly-connected-component-algorithms"},{"type":"link","label":"Topological sort algorithm","href":"/graaf/docs/algorithms/topological-sort/","docId":"algorithms/topological-sort/topological-sort","unlisted":false},{"type":"category","label":"Traversal Algorithms","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Breadth First Search (BFS)","href":"/graaf/docs/algorithms/traversal/breadth-first-search","docId":"algorithms/traversal/breadth-first-search","unlisted":false},{"type":"link","label":"Depth First Search (DFS)","href":"/graaf/docs/algorithms/traversal/depth-first-search","docId":"algorithms/traversal/depth-first-search","unlisted":false}],"href":"/graaf/docs/category/traversal-algorithms"}],"exampleSidebar":[{"type":"link","label":"Examples","href":"/graaf/docs/examples/intro","docId":"examples/intro","unlisted":false},{"type":"category","label":"Basic Examples","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Dot Serialization Example","href":"/graaf/docs/examples/example-basics/dot-serialization","docId":"examples/example-basics/dot-serialization","unlisted":false},{"type":"link","label":"Shortest Path Example","href":"/graaf/docs/examples/example-basics/shortest-path","docId":"examples/example-basics/shortest-path","unlisted":false},{"type":"link","label":"Network Example","href":"/graaf/docs/examples/example-basics/transport-example","docId":"examples/example-basics/transport-example","unlisted":false}],"href":"/graaf/docs/category/basic-examples"}]},"docs":{"algorithms/clique-detection/bron_kerbosch":{"id":"algorithms/clique-detection/bron_kerbosch","title":"Bron-Kerbosch algorithm","description":"Bron-Kerbosch algorithm finding all maximal cliques in an undirected graph. A clique is a subset of vertices such that","sidebar":"algorithmSidebar"},"algorithms/coloring/greedy-graph-coloring":{"id":"algorithms/coloring/greedy-graph-coloring","title":"Greedy Graph Coloring Algorithm","description":"Greedy Graph Coloring computes a coloring of the vertices of a (simple, connected) graph such that no two adjacent","sidebar":"algorithmSidebar"},"algorithms/coloring/welsh-powell":{"id":"algorithms/coloring/welsh-powell","title":"Welsh Powell Algorithm","description":"Welsh Powell Algorithm computes a coloring of the vertices of a (simple, connected) graph such that no two adjacent","sidebar":"algorithmSidebar"},"algorithms/cycle-detection/dfs-based":{"id":"algorithms/cycle-detection/dfs-based","title":"DFS Based Cycle Detection","description":"A DFS based cycle detection algorithm is used to identify cycles in graphs, both directed and undirected.","sidebar":"algorithmSidebar"},"algorithms/intro":{"id":"algorithms/intro","title":"Algorithms Overview","description":"This section provides an overview of the algorithms currently implemented in Graaf.","sidebar":"algorithmSidebar"},"algorithms/minimum-spanning-tree/kruskal":{"id":"algorithms/minimum-spanning-tree/kruskal","title":"Kruskal\'s Algorithm","description":"Kruskal\'s algorithm finds the minimum spanning forest of an undirected edge-weighted graph. If the graph is connected,","sidebar":"algorithmSidebar"},"algorithms/minimum-spanning-tree/prim":{"id":"algorithms/minimum-spanning-tree/prim","title":"Prim\'s Algorithm","description":"Prim\'s algorithm computes the minimum spanning tree (MST) of a connected, undirected graph with weighted edges. Starting","sidebar":"algorithmSidebar"},"algorithms/shortest-path/a-star":{"id":"algorithms/shortest-path/a-star","title":"A* Search Algorithm","description":"A\\\\* computes the shortest path between a starting vertex and a target vertex in weighted and unweighted graphs.","sidebar":"algorithmSidebar"},"algorithms/shortest-path/bellman-ford":{"id":"algorithms/shortest-path/bellman-ford","title":"Bellman-Ford Shortest Path","description":"Bellman-Ford\'s algorithm computes shortest paths from a single source vertex to all of the other vertices in weighted","sidebar":"algorithmSidebar"},"algorithms/shortest-path/bfs-based-shortest-path":{"id":"algorithms/shortest-path/bfs-based-shortest-path","title":"BFS Based Shortest Path","description":"Breadth-First Search (BFS) is a graph traversal algorithm that efficiently finds the shortest","sidebar":"algorithmSidebar"},"algorithms/shortest-path/dijkstra":{"id":"algorithms/shortest-path/dijkstra","title":"Dijkstra Shortest Path","description":"Dijkstra\'s algorithm computes shortest paths between nodes in weighted and unweighted graphs. In weighted graphs,","sidebar":"algorithmSidebar"},"algorithms/shortest-path/floyd-warshall":{"id":"algorithms/shortest-path/floyd-warshall","title":"Floyd-Warshall algorithm","description":"Floyd-Warshall algorithm computes the shortest path between any two vertices in a graph, both directed and undirected.","sidebar":"algorithmSidebar"},"algorithms/strongly-connected-components/kosarajus":{"id":"algorithms/strongly-connected-components/kosarajus","title":"Kosaraju\'s Strongly Connected Components","description":"Kosaraju\'s algorithm computes the Strongly Connected Components (SCCs) of a directed graph. An SCC is a subset of vertices","sidebar":"algorithmSidebar"},"algorithms/strongly-connected-components/tarjan":{"id":"algorithms/strongly-connected-components/tarjan","title":"Tarjan\'s Strongly Connected Components","description":"Tarjan\'s algorithm computes the Strongly Connected Components (SCCs) of a directed graph. An SCC is a subset of vertices","sidebar":"algorithmSidebar"},"algorithms/topological-sort/topological-sort":{"id":"algorithms/topological-sort/topological-sort","title":"Topological sort algorithm","description":"Topological sort algorithm processing DAG(directed acyclic graph) using DFS traversal.","sidebar":"algorithmSidebar"},"algorithms/traversal/breadth-first-search":{"id":"algorithms/traversal/breadth-first-search","title":"Breadth First Search (BFS)","description":"Breadth First Search (BFS) Algorithm","sidebar":"algorithmSidebar"},"algorithms/traversal/depth-first-search":{"id":"algorithms/traversal/depth-first-search","title":"Depth First Search (DFS)","description":"Depth First Search (DFS) Algorithm","sidebar":"algorithmSidebar"},"examples/example-basics/dot-serialization":{"id":"examples/example-basics/dot-serialization","title":"Dot Serialization Example","description":"The to_dot function as defined under graaf::io can be used to searialize graphs to","sidebar":"exampleSidebar"},"examples/example-basics/shortest-path":{"id":"examples/example-basics/shortest-path","title":"Shortest Path Example","description":"The shortest path algorithm implemented in graaf::getshortestpath can be used to compute the shortest","sidebar":"exampleSidebar"},"examples/example-basics/transport-example":{"id":"examples/example-basics/transport-example","title":"Network Example","description":"This example showcases graph traversal and shortest path algorithms in an undirected graph network. As such, it","sidebar":"exampleSidebar"},"examples/intro":{"id":"examples/intro","title":"Examples","description":"This section contains example usages of the Graaf library.","sidebar":"exampleSidebar"},"quickstart/basics/architecture":{"id":"quickstart/basics/architecture","title":"Graaf Architecture","description":"From a very high level, the project is structured in two parts:","sidebar":"quickstartSidebar"},"quickstart/basics/creating-your-first-graph":{"id":"quickstart/basics/creating-your-first-graph","title":"Creating Your First Graph","description":"1. In your main.cpp import Graaf:","sidebar":"quickstartSidebar"},"quickstart/basics/using-algorithms":{"id":"quickstart/basics/using-algorithms","title":"Using Algorithms","description":"1. In your main.cpp import Graaf and algorithm of choice:","sidebar":"quickstartSidebar"},"quickstart/installation/alternative-methods":{"id":"quickstart/installation/alternative-methods","title":"Alternative Installation Methods","description":"As a submodule","sidebar":"quickstartSidebar"},"quickstart/installation/installation":{"id":"quickstart/installation/installation","title":"Installation","description":"Graaf Header-Only Installation","sidebar":"quickstartSidebar"},"quickstart/intro":{"id":"quickstart/intro","title":"Quickstart Intro","description":"Let\'s install Graaf in your project...","sidebar":"quickstartSidebar"}}}}')}}]);