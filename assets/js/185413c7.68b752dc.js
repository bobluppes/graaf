"use strict";(self.webpackChunkgraaf=self.webpackChunkgraaf||[]).push([[109],{6187:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"quickstart/installation/installation","title":"Installation","description":"Graaf Header-Only Installation","source":"@site/docs/quickstart/installation/installation.md","sourceDirName":"quickstart/installation","slug":"/quickstart/installation/","permalink":"/graaf/docs/quickstart/installation/","draft":false,"unlisted":false,"editUrl":"https://github.com/bobluppes/graaf/tree/main/docs/quickstart/installation/installation.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"quickstartSidebar","previous":{"title":"Quickstart - Installation","permalink":"/graaf/docs/category/quickstart---installation"},"next":{"title":"Alternative Installation Methods","permalink":"/graaf/docs/quickstart/installation/alternative-methods"}}');var i=a(4848),l=a(8453);const s={sidebar_position:1},r="Installation",c={},o=[{value:"Graaf Header-Only Installation",id:"graaf-header-only-installation",level:2},{value:"CMake FetchContent",id:"cmake-fetchcontent",level:2},{value:"CMake Options",id:"cmake-options",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"installation",children:"Installation"})}),"\n",(0,i.jsx)(n.h2,{id:"graaf-header-only-installation",children:"Graaf Header-Only Installation"}),"\n",(0,i.jsxs)(n.p,{children:["Installing Graaf on your project is easy! Simply copy the ",(0,i.jsx)(n.code,{children:"graaflib"})," directory to your project and add it to your\ninclude path."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Copy ",(0,i.jsx)(n.code,{children:"graaflib"})," to your project."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Before compiling, add the directory to your include path."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# For C compiler\nexport C_INCLUDE_PATH="/full/path/to/include/:$C_INCLUDE_PATH"\n# For Cpp compiler\nexport CPLUS_INCLUDE_PATH="/full/path/to/include/:$CPLUS_INCLUDE_PATH"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Or in CMake:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-CMake",children:'include_directories("graaf/include")\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Include the graaf header in your sources."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c++",children:"#include <graaflib/graph.h>\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"cmake-fetchcontent",children:"CMake FetchContent"}),"\n",(0,i.jsxs)(n.p,{children:["Alternatively, this project can be pulled in using CMake's ",(0,i.jsx)(n.code,{children:"FetchContent"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-CMake",children:"include(FetchContent)\nFetchContent_Declare(\n        graaflib\n        GIT_REPOSITORY https://github.com/bobluppes/graaf.git\n        GIT_TAG main\n)\nFetchContent_MakeAvailable(graaflib)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now you can link your target against ",(0,i.jsx)(n.code,{children:"Graaf::Graaf"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-CMake",children:"target_link_libraries(${PROJECT_NAME} PRIVATE Graaf::Graaf)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"cmake-options",children:"CMake Options"}),"\n",(0,i.jsx)(n.p,{children:"There are multiple CMake Options available to choose how you want to build Graaf in your Project."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SKIP_TESTS"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Default: ",(0,i.jsx)(n.code,{children:"OFF"})]}),"\n",(0,i.jsx)(n.li,{children:"Enabling skips building the tests."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SKIP_EXAMPLES"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Default: ",(0,i.jsx)(n.code,{children:"OFF"})]}),"\n",(0,i.jsx)(n.li,{children:"This skips building the example usages of the Library."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SKIP_BENCHMARKS"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Default: ",(0,i.jsx)(n.code,{children:"OFF"})]}),"\n",(0,i.jsx)(n.li,{children:"This skips building the Benchmarks."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"These Options can be set while executing the cmake command"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cmake -DSKIP_TESTS=ON -DSKIP_EXAMPLES=ON -DSKIP_BENCHMARKS=ON [source_directory]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["or by setting them in your Projects CMakeLists.txt (before ",(0,i.jsx)(n.code,{children:"FetchContent_MakeAvailable(graaflib)"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cmake",children:"set(SKIP_TESTS ON)\nset(SKIP_BENCHMARKS ON)\nset(SKIP_EXAMPLES ON)\nFetchContent_MakeAvailable(graaflib)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>r});var t=a(6540);const i={},l=t.createContext(i);function s(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);